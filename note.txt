Request：客户端发送至服务器的请求
属性：
.url
.path
.method    请求方式：GET或POST
.args    参数，返回类字典对象
.cookies
.user_agent
.headers
.form.get('name')
.remote_addr    客户端的IP

Response：服务器对客户端的响应
返回方式：
字符串
模板渲染
json数据
自定义响应对象
res = make_response(html_obj)
res = Response(html_obj)

Redirect：重定向
redirect（url）
redirect（'/detail/'）
redirect（url_for('蓝图.视图函数'，arg)    url_for：反向解析，可传参数

Cookie  # 安全性低，在浏览器存储
1.生成Cookie
response.set_cookie(cookie_name,cookie_value,max_age=3600*24*7)
response.set_cookie(cookie_name,cookie_value,expires=datetime.datetime(2025,12,12))
2.获取cookie
username = response.cookies.get(cookie_name)
render_templates('html',username)
3.删除cookie
response.delete_cookie(cookie_name)

Session # 安全性高，在服务器存储，依赖cookie
1.设置
session['key] = 'value'
app.config['SECRET_KEY'] = 'my_secret'  # 将session的value加密
session.permanent = True    # 设置过期时间，默认一月
app.config['PERMANENT_SESSION_LIFETIME'] =datetime.timedelta(days=10)   # 过期时间
2.获取
session.get('key')
3.删除
session.pop('key')
session.clear()

数据迁移
1. flask db init
2. flask db migrate     # 创建迁移文件
3. flask db upgrade
4. flask db downgrade

ORM
1.user = UserModel()
2.user.name = 'Alan'
3.db.session.add() or db.session.add_all()
4.db.query
    .first() or first_or_404()
    .get(id) or get_or_404(id)
    .all()
    .filter()   # 过滤器，相当于SQL中的where
    .filter_by()    # 等值过滤
    .count()
    .limit()
    .offset()
    .order_by()
    and_    or_     not_
    查询属性
        .contains()     # 类似于SQL中的like
        .startswith() or endswith()
        例：User.query.filter(User.name.contains('a))
5.user.name = 'new_value'
6.db.session.delete()
7.db.session.commit()
8.db.session.rollback() , db.session.flush()

paginate
1.页码和数量
page = request.args.get('page',1)   # 默认值：page=1
per_page = request.args.get('per_page',10)
2.分页
users = UserModel.query.paginate(page=page,per_page=per_page,error_out=False).items
3.属性
    .items
    .page
    .pages
    .total
    .has_prev
    .has_next
    .prev_num
    .next_num

多表关系
1.在1：N关系中，外键加在多（N）的一方
2.建立关联
    1： grade_id = db.Column(db.Integer,db.ForeignKey(GradeModel.id))
    N:  students = db.relationship('StudentModel',backref='grade',lazy=True)
3.用例
    正向查询： grade.students   可使用for循环拿到students中单个学生的数据
    反向查询：stu.grade.id , stu.grade.name

flask-caching
    初始化：extentions.py-->创建，__init__.py-->初始化
    生成cache：@cache.cached(timeout=60)
        -->views.py 或 apis.py 中使用

钩子函数
1.before_first_request
2.before_request
3.after_request
4.teardown_appcontext
5.AOP反爬策略
    @blue.before_request:
    def before()：
        ip = request.remote_addr
        if cache.get(ip):
            raise Error418
        else:
            cache = cache.set(ip,'value',timeout=1)     # 1s缓存内，禁止重复访问

内置对象
1.g:全局对象
    g.rating = 9.5
2.request
3.session
4.current_app：Flask应用对象
    current_app.config


前后端分离
一：
    后端：jsonify()返回数据
    前端：ajax请求数据

二：flask-RESTful
1.配置
    初始化：extentions.py-->创建，__init__.py-->初始化
    生成api：apis.py
    注册路由：urls.py
2.字段格式化：后端数据规范
2.1 定义字段格式
    fields.String
            .Integer(default=20)  # 默认值
            .String(attribute='name')     # 关联数据'name'
            .Nested(other_fields)   # 嵌套字典
            .List(fields.Nested(other_fields))    # 嵌套列表
            .Url(endpoint='id',absolute=True)
                api.add_resource(HelloResource,'/hello/',endpoint='id)
                --> 在'/hello/'的路由中返回数据
2.2 结构
@marshal_with(user_fields)
def get():
    return {}

3.参数解析：前端数据验证
3.1 解析器
    parser = reqparse.RequestParser()
3.2 参数规范
    parser.add_argument('name',type=str,required=True,help='name is required!')
        -->name未提交时，返回help信息
    parser.add_argument('age',type=int,action='append')
        -->可以传入多个age
    parser.add_argument('cookie_name',type=str,location='cookie')

3.3 参数获取
    args = parser.parser_args()
    name = args.get('name')
    
